{"path":"Files/Ling 430 - Handout #20 - Spectrograms.pdf","text":"Ling 430 April 20th, 2022 Speech Recognition: Spectrograms 1. Waveforms • A waveform is the most direct representation of sound as it is recorded by a computer • Waveforms show us amplitude (measured in pressure relative to atmospheric pressure) over time (left shows span of 370 ms, vs. 25 ms on right) • The sampling rate is how many pressure samples were taken per second. • Let’s first read in a .wav soundfile into Python and look at its raw contents from scipy.io import wavfile sample_rate, d = wavfile.read('D:/sample.wav') 2. Spectrograms: Fourier transform • The human ear and brain interpret sound spectrally, meaning different speech sounds will be identified based on the amplitude of sound at different frequencies • A waveform will represent many different component frequencies all at the same time. We’ll need a special algorithm--- the Fourier transform--- to pull apart those components to find out the amplitudes at different frequencies. • We’ll use the following code to apply the Discrete Fourier Transform: import numpy as np def DFT(x): N = len(x) n = np.arange(N) k = n.reshape((N, 1)) e = np.exp(-2j * np.pi * k * n / N) X = np.dot(e, x) return X • x will be an array of amplitudes over N timesteps • X returns amplitudes for that time step for N frequencies 3. Spectrograms: Setting up windows and timesteps • We need to determine the amplitudes of different frequencies at different times, not just over the entire sample • Thus, we collect frequency information over windows of a set size • Longer windows: more precise in frequency, less precise with time = narrow-band spectrogram • Shorter windows: less precise in frequency, more precise with time = wide-band spectrogram • Stride is how far we move the window for the next time step (if less than the window length, adjacent windows will overlap) window_size = 0.025 stride = 0.01 • We’ll eventually need to know the # of samples in each window, and the # of samples in each stride (for when we loop over the data): samples_per_window = int(window_size * sample_rate) stride_length = int(stride * sample_rate) • We also want to set a maximum frequency to view in the spectrogram, because we may not care about very high, non-linguistically relevant frequencies: max_freq = 5000 cutoff = int((max_freq/sample_rate)*samples_per_window) • We’ll also initialize a blank plot to which we’ll end up adding frequency data for each window: import matplotlib.pyplot as plt plt.figure(figsize=(24, 12), dpi=80) 4. Spectrograms: Looping over the waveform • We want to loop over the entire waveform and define each window as a slice of the larger vector one at a time for x in range(0,len(d)-samples_per_window,stride_length): window = d[x:x+samples_per_window] • An optional step is to apply a Hamming window. This increases the amplitudes in the middle of a window and decreases them at the ends, which has the effect of smoothing out the amplitudes between timesteps and avoiding discontinuities: hammified_window = [value * (0.54-(0.46*np.cos((2*np.pi*i)/(samples_per_window)))) for i, value in enumerate(window)] • Now we apply the Fourier transform to the window, taking the absolute values of resulting amplitudes: fourier = DFT(hammified_window[:int(len(hammified_window)/1)]) fourier = np.abs(fourier) • The variable ‘fourier’ stores the amplitudes at each frequency, but we need to calculate what those corresponding frequencies are (which will be the y-axis): freq = [x * (sample_rate / samples_per_window) for x in range(len(fourier))] • Likewise, we need to know which sample / timestep the given window is representing. So we derive a list of x values (time), where the x value will be the same for all the frequencies in this window: x_values = [x for y in range(len(freq))] • Add each timestep to the plot. Note that the amplitude values we calculated for each frequency will be represented by the color of the particular pixel plt.scatter(x_values[:cutoff], freq[:cutoff], c=fourier[:cutoff], s=16, marker = 's') • Now show the plot to view the spectrogram: plt.show()","libVersion":"0.5.0","langs":""}